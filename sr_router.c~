/**********************************************************************
 * file:  sr_router.c
 * date:  Mon Feb 18 12:50:42 PST 2002
 * Contact: casado@stanford.edu
 *
 * Description:
 *
 * This file contains all the functions that interact directly
 * with the routing table, as well as the main entry method
 * for routing.
 *
 **********************************************************************/

#include <stdio.h>
#include <assert.h>


#include "sr_if.h"
#include "sr_rt.h"
#include "sr_router.h"
#include "sr_protocol.h"
#include "sr_arpcache.h"
#include "sr_utils.h"


//**********************************************************//
//*** helper function set to obtain longest prefix match ***//
//**********************************************************//

//declaring a new struct to contain destination addresses in the router
//that matches packet's destination ip address

struct addr_in
{  
   uint32_t maskedAddr;
   uint32_t destAddr; 
   struct addr_in* next;
   int common_len;
};

//build a linked-list of destination address and corresponding masked address
void addr_in_set(struct addr_in ** in,uint32_t addr_mask,uint32_t dest_addr)
{
	if (*in == NULL)
	{
		*in = (struct addr_in*)malloc(sizeof(struct addr_in));
		(*in)->maskedAddr = addr_mask;
   		(*in)->destAddr = dest_addr;
		(*in)->next == NULL;		
	}
	
	else
	{
		struct addr_in* naddr = (struct addr_in*)malloc(sizeof(struct addr_in));
		naddr->maskedAddr = addr_mask;
		naddr->destAddr = dest_addr;
		naddr->next = *in;
		*in = naddr;		

	}

}

//function to determine address with the longest prefix
uint32_t longest_prefix_dest_addr(struct addr_in** in,uint32_t ip_dest)
{

   struct addr_in* iter = *in;
   int i,snum;
   while (iter)
   {
     snum = 0; //number of matching bits
     //compare each bit in the ip destination address and the router's masked
     //destination address, starting from the highest bit
     for (i = 0; i < 32; i++)
     {
	uint32_t addr_bit1 = (ip_dest >> 31-i) && 0x0001;
	uint32_t addr_bit2 = (iter->maskedAddr >> 31-i) && 0x0001;
	if (addr_bit1 == addr_bit2)
	{ snum++;}
     } 
     iter->common_len = snum;
     iter = iter->next; 
   }
   
   struct addr_in *iter2 = *in;
   uint32_t longest_addr;
   uint32_t max = 0;
   
   //find the destination address with the longest prefix match 
   while (iter2)
   {
	if (iter2->snum > max)
	{ 
		max = iter2->snum;
		longest_addr = iter2->destAddr;
	}
	iter2 = iter2->next;

   }	 
   return longest_addr; 
   

}



/*---------------------------------------------------------------------
 * Method: sr_init(void)
 * Scope:  Global
 *
 * Initialize the routing subsystem
 *
 *---------------------------------------------------------------------*/



void sr_init(struct sr_instance* sr)
{
    /* REQUIRES */
    assert(sr);

    /* Initialize cache and cache cleanup thread */
    sr_arpcache_init(&(sr->cache));

    pthread_attr_init(&(sr->attr));
    pthread_attr_setdetachstate(&(sr->attr), PTHREAD_CREATE_JOINABLE);
    pthread_attr_setscope(&(sr->attr), PTHREAD_SCOPE_SYSTEM);
    pthread_attr_setscope(&(sr->attr), PTHREAD_SCOPE_SYSTEM);
    pthread_t thread;

    pthread_create(&thread, &(sr->attr), sr_arpcache_timeout, sr);
     
    /* Add initialization code here! */
	
    //adding interfaces in the routing table to sr instance.
    struct sr_rt* rt_walker = sr->routing_table;
    while (rt_walker)
    {
 	sr_add_interface(sr,rt_walker->interface);	
	rt_walker = rt_walker->next;
	
    }
    //everything else in sr_instance struct is initialized in main.c   

} /* -- sr_init -- */

/*---------------------------------------------------------------------
 * Method: sr_handlepacket(uint8_t* p,char* interface)
 * Scope:  Global
 *
 * This method is called each time the router receives a packet on the
 * interface.  The packet buffer, the packet length and the receiving
 * interface are passed in as parameters. The packet is complete with
 * ethernet headers.
 *
 * Note: Both the packet buffer and the character's memory are handled
 * by sr_vns_comm.c that means do NOT delete either.  Make a copy of the
 * packet instead if you intend to keep it around beyond the scope of
 * the method call.
 *
 *---------------------------------------------------------------------*/

void sr_handlepacket(struct sr_instance* sr,
        uint8_t * packet/* lent */,
        unsigned int len,
        char* interface/* lent */)
{
  /* REQUIRES */
  assert(sr);
  assert(packet);
  assert(interface);

  printf("*** -> Received packet of length %d \n",len);

  /* fill in code here */
 
  //initializing key variables
  uint8_t* packet_buffer; //packet buffer
  struct sr_if* iface; //interface struct
  uint16_t checksum,ether_type,; //checksum bit
  unsigned int packet_len,minlength; //packet length


  packet_buffer = packet;
  packet_len = len;
  minlength = sizeof(sr_ethernet_hdr_t);
  if (len > IP_MAXPACKET)
  {
    	perror("Error: invalid packet size");
  }
  if (length < minlength)
  {
        perror("Error: packet size too small");
  }
  //obtain interface information
  iface = sr_get_interface(sr,interface);

  //performing checksum on the packet
  checksum = cksum(packet_buffer,packet_len);
  if ((checksum & 0xffff) != 0xffff) //data has been corrupted
  {
 	perror("Error: data has been corrupted");
  } 
  
  //examining each layer of header//  
  
  //examine ethernet header
  sr_ethernet_hdr_t* ether_header = (sr_ethernet_hdr_t*) packet_buffer;  
  ether_type = ethertype(packet_buffer); //examine ethernet subheader type
  
  if (ether_type == ethertype_ip) //ip
  {
	sr_ip_hdr_t* ip_header = (sr_ip_hdr_t*) (packet_buffer+sizeof(sr_ethernet_hdr_t)); //obtain ip_header
        ip_header->ip_ttl--; //decrement TTL field
        ip_header->ip_sum = cksum(ip_header,ip->len); //recompute checksum
	
        //now performing longest-prefix-matching 

	struct sr_rt* rt_walker = sr->routing_table;
	struct addr_in* destAddrSet = NULL;
	uint32_t maskedAddr,dest_longest;
	while (rt_walker)
	{
		//maskedAddr
		maskedAddr = rt_walker->dest.s_addr & rt_walker->mask.s_add;
		addr_in_set(&destAddrSet,maskedAddr,rt_walker->dest.s_addr);
		rt_walker = rt_walker->next;		

	}		
	//destination address with the longest prefix match
        dest_longest = longest_prefix_dest_addr(&destAddrSet,ip_header->ip_dst);
	

  }
  else if (ether_type == ethertype_arp) //arp
  {


  }
  
}/* end sr_ForwardPacket */

